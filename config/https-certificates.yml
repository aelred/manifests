# Set up HTTPS certificates, can use it with an Ingress with these annotations:
#  kubernetes.io/ingress.class: traefik
#  cert-manager.io/cluster-issuer: letsencrypt
#  traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd
---
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    name: cert-manager
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: jetstack
  namespace: cert-manager
spec:
  interval: 1m0s
  url: https://charts.jetstack.io
---
# Install cert-manager, which manages HTTPS certificates across a cluster
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: cert-manager
  namespace: cert-manager
spec:
  chart:
    spec:
      chart: cert-manager
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: jetstack
      version: v1.13.1
  interval: 1m0s
  values:
    installCRDs: true
    webhook:
      networkPolicy:
        enabled: true
---
# Use Letencrypt to get our HTTPS certificates
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
  namespace: cert-manager
spec:
  acme:
    email: aelred717@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt
    # Use the HTTP01 solver: letsencrypt challenges us to host a token at http://foo.ael.red/.well-known/something
    solvers:
    - http01:
        ingress:
          ingressClassName: traefik
---
# Redirect from HTTP with HTTPS for ingress with an annotation
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: redirect-https
  namespace: kube-system
spec:
  redirectScheme:
    scheme: https
    permanent: true
---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-certmanager-acme
  namespace: flux-system
spec:
  policyTypes:
  - Ingress
  podSelector: # allow the certmanager http server (for ACME protocol) to be reached from LetsEncrypt
    matchExpressions: # Look for the labels but ignore their contents
    - {key: certmanager.k8s.io/acme-http-domain, operator: Exists}
    - {key: certmanager.k8s.io/acme-http-token, operator: Exists}
  ingress: # allow from anywhere inside the cluster or on the internet
  - from: []