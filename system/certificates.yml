# Set up HTTPS certificates, can use it with an Ingress with these annotations:
#   metadata:
#     ...
#     annotations:
#       cert-manager.io/cluster-issuer: letsencrypt
#       traefik.ingress.kubernetes.io/middleware: redirect-https
#   spec:
#     rules: ...
#     tls:
#       - secretName: {$YOUR INGRESS}-tls
#         hosts:
#           - ${YOUR DOMAIN}.ael.red
---
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    name: cert-manager
---
# Install cert-manager, which manages HTTPS certificates across a cluster
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: cert-manager
  namespace: flux-system
spec:
  interval: 5m
  prune: true
  sourceRef:
    kind: GitRepository
    name: kustomizations
  path: ./kustomizations/cert-manager
---
# Create a cluster-issuer for letsencrypt
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: cluster-issuer
  namespace: flux-system
spec:
  interval: 5m
  prune: true
  sourceRef:
    kind: GitRepository
    name: kustomizations
  path: ./kustomizations/cluster-issuer
  dependsOn:
    - name: cert-manager
---
# Redirect from HTTP with HTTPS for ingress with an annotation
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: redirect-https
  namespace: kube-system
spec:
  redirectScheme:
    scheme: https
    permanent: true
---
# Because flux adds network policies in its own namespace, cert-manager challenges can't go through without this
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-certmanager-acme
  namespace: flux-system
spec:
  policyTypes:
  - Ingress
  podSelector: # allow the certmanager http server (for ACME protocol) to be reached from LetsEncrypt
    matchExpressions: # Look for the labels but ignore their contents
    - {key: acme.cert-manager.io/http-domain, operator: Exists}
    - {key: acme.cert-manager.io/http-token, operator: Exists}
  ingress: # allow from anywhere inside the cluster or on the internet
  - from: []